# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

steps:
- script: |
    wget --output-document="$(Build.StagingDirectory)/cmake.sh" https://github.com/Kitware/CMake/releases/download/v3.22.1/cmake-3.22.1-linux-x86_64.sh
    mkdir "$(Build.StagingDirectory)/cmake"
    bash "$(Build.StagingDirectory)/cmake.sh" --skip-license --prefix="$(Build.StagingDirectory)/cmake"
    echo "##vso[task.prependpath]$(Build.StagingDirectory)/cmake/bin"
  displayName: Install CMake
  workingDirectory: $(Build.StagingDirectory)
  target: manylinux

- script: |
    miniconda_path="miniconda3"
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash Miniconda3-latest-Linux-x86_64.sh -b -p $miniconda_path
    eval "$($miniconda_path/bin/conda shell.bash hook)" 
    conda create --name build python=$(vars.pyVersionMajorDotMinor) -y
    activate_cmd="source $(Build.StagingDirectory)/$miniconda_path/bin/activate build"
    source $(Build.StagingDirectory)/$miniconda_path/bin/activate build
    pip install wheel
    echo "##vso[task.setVariable variable=activateCommand;isOutput=true]$activate_cmd"
  displayName: Install Miniconda
  name: miniconda
  workingDirectory: $(Build.StagingDirectory)
  target: manylinux

- script: |
    sudo apt update
    sudo apt install ninja-build -y
  displayName: Install Ninja
  workingDirectory: $(Build.StagingDirectory)
  target: manylinux

# TODO: Remove this step and create a docker image that contains clang 13 instead
- script: |
    wget https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz
    tar -xf clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz
    export CXX="$(Build.StagingDirectory)/clang+llvm-13.0.0-x86_64-linux-gnu-ubuntu-16.04/bin/clang++""
  displayName: Install Clang 13
  workingDirectory: $(Build.StagingDirectory)
  target: manylinux