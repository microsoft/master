# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

parameters:
- name: artifact
  type: string
  default: ''
- name: releaseBuild
  type: boolean
  default: false
- name: addToBlobStorage
  type: boolean
  default: false
- name: enableTelemetry
  type: boolean
- name: telemetryProviderGroupGuid
  type: string

jobs:
- job:
  displayName: Build ${{parameters.artifact}}
  timeoutInMinutes: 20
  workspace:
    clean: all
  ${{if contains(parameters.artifact, '-linux-') }}:
    pool: DirectML_TF2_Linux_Pool
  ${{if contains(parameters.artifact, '-win-') }}:
    pool: DirectML_TF2_Windows_Pool
  variables:
    buildOutPath: $(Build.StagingDirectory)/build_out
    buildPubPath: $(Build.StagingDirectory)/build_pub
  steps:
  - powershell: |
      $StartTicks = (Get-Date).Ticks
      Write-Host "Start Time = '$StartTicks' $([datetime]$StartTicks)"
      Write-Host "##vso[task.setVariable variable=startTicks;isOutput=true]$StartTicks"
      if ('${{parameters.artifact}}' -match '(x64-win|x64-linux)-(release|debug)-(cp\d{2,3})')
      {
          $Architecture, $Configuration, $PyVersion = $Matches[1..3]
          Write-Host "Architecture = '$Architecture'"
          Write-Host "##vso[task.setVariable variable=architecture;isOutput=true]$Architecture"
          Write-Host "Configuration = '$Configuration'"
          Write-Host "##vso[task.setVariable variable=configuration;isOutput=true]$Configuration"
          
          Write-Host "PyVersion = '$PyVersion'"
          Write-Host "##vso[task.setVariable variable=pyVersion;isOutput=true]$PyVersion"
          
          $PyVersionMajorDotMinor = $PyVersion[2] + '.' + $PyVersion.SubString(3)
          Write-Host "PyVersionMajorDotMinor = '$PyVersionMajorDotMinor'"
          Write-Host "##vso[task.setVariable variable=pyVersionMajorDotMinor;isOutput=true]$PyVersionMajorDotMinor"
      }
      else
      {
          throw "Could not parse build artifact: '${{parameters.artifact}}'"
      }

      # Appends ".dev<DATE>" to the Python wheel version. For example, if the pipeline version is 211007-2233.1.master, 
      # and _VERSION is currently 0.0.1, then the updated version will be 0.0.1.dev211007. If the "Release Build" parameter 
      # is set then the .dev suffix is removed entirely.
      if ("${{parameters.releaseBuild}}" -eq "True") {
          $WheelVersionSuffix = ''
      } else {
          $WheelVersionSuffix = ".dev" + "$(Build.BuildNumber)" -replace '(\d{6}).*','$1'
      }

      Write-Host "##vso[task.setVariable variable=wheelVersionSuffix;isOutput=true]$WheelVersionSuffix"

    name: vars
    displayName: Initialize Variables
  - ${{if contains(parameters.artifact, '-linux-') }}:
    - template: setup_agent_linux.yml
  - ${{if contains(parameters.artifact, '-win-') }}:
    - template: setup_agent_windows.yml

  - ${{if contains(parameters.artifact, '-linux-') }}:
    - script: |
        $(miniconda.activateCommand)
        if ["${{parameters.enableTelemetry}}" = "True"]; then
          python build.py --config $(vars.configuration) --build_output $(buildOutPath) --telemetry --telemetry_provider_group_guid "${{parameters.telemetryProviderGroupGuid}}" --wheel_version_suffix "$(vars.wheelVersionSuffix)"
        else
          python build.py --config $(vars.configuration) --build_output $(buildOutPath) --wheel_version_suffix "$(vars.wheelVersionSuffix)"
        fi
      displayName: Build
      target: manylinux
    # Rename instead of using auditwheel repair since libd3d12.so will not register as manylinux compliant
    # - powershell: |
        # get-childitem -file -recurse $(buildOutPath)
        # $original_whl = (get-childitem $(buildOutPath)/python_package/*).FullName
        # $manylinux_whl = $original_whl -replace 'linux_x86_64','manylinux2010_x86_64'
        # mv $original_whl $manylinux_whl
      # displayName: Rename Wheel
      # continueOnError: true
  - ${{if contains(parameters.artifact, '-win-') }}:
    - powershell: |
        Invoke-Expression '$(miniconda.activateCommand)'

        if ("${{parameters.enableTelemetry}}" -eq "True") {
          python build.py --config $(vars.configuration) --build_output $(buildOutPath) --telemetry --telemetry_provider_group_guid "${{parameters.telemetryProviderGroupGuid}}" --wheel_version_suffix "$(vars.wheelVersionSuffix)"
        } else {
          python build.py --config $(vars.configuration) --build_output $(buildOutPath) --wheel_version_suffix "$(vars.wheelVersionSuffix)"
        }
      displayName: Build
  - powershell: |
      New-Item -Force -ItemType Directory "$(buildPubPath)"
      Copy-Item -Recurse "$(buildOutPath)/*.whl" "$(buildPubPath)"
      Copy-Item -Recurse "$(Build.SourcesDirectory)/test" "$(buildPubPath)"
    displayName: Stage Artifacts
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      PathtoPublish: $(buildPubPath)
      ArtifactName: ${{parameters.artifact}}

  - ${{if parameters.addToBlobStorage }}:
    - powershell: |
        $InstallPath = "$(buildPubPath)\*"
        $ZipPath = "$(buildPubPath)\${{parameters.artifact}}.zip"
        Compress-Archive -Path $InstallPath -DestinationPath $ZipPath -Verbose
      displayName: Compress Build Archive
      continueOnError: true

    - task: PowerShell@1
      displayName: Submit artifacts to blob storage
      continueOnError: true
      # regenerate azureBlobToken in the winaiblob storage account in CoreOS_Sigma_Graphics Azure subscription. Currently set to expire in Feb 2024
      inputs:
        scriptName: pipelines/SubmitFilesToBlobStorage.ps1
        arguments: >
          -AzureBlobLink "https://winaiblob.blob.core.windows.net/windowsai/"
          -AzureBlobLinkToken "$(azureBlobToken)"
          -SourcePath "$(buildPubPath)\${{parameters.artifact}}.zip"
          -TargetPath tf2_directml_builds\$(Build.BuildNumber).$(Build.SourceVersion)\${{parameters.artifact}}.zip

  - powershell: |
      $Duration = ((Get-Date) - [datetime]$(vars.startTicks)).ToString("c")
      [ordered]@{agentName = $env:AGENT_NAME; status = $env:AGENT_JOBSTATUS; duration = $Duration} | 
        ConvertTo-Json | 
        Out-File $(Build.StagingDirectory)/${{parameters.artifact}}.json
      cat $(Build.StagingDirectory)/${{parameters.artifact}}.json
    displayName: Gather Agent Info
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: Publish Agent Info
    condition: always()
    inputs:
      PathtoPublish: $(Build.StagingDirectory)/${{parameters.artifact}}.json
      ArtifactName: build