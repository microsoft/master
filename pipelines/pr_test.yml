# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

parameters:
- name: agentPool
  type: string
  default: DirectML
- name: testGroups
  type: object
  default: [ops, plugin]
- name: resultsArtifactName
  type: string
  default: test
- name: tensorflowPackages
  type: object
  default: [tf-nightly-cpu]
- name: tensorflowVersion
  type: string
  default: 2.10.0.dev20220728
- name: kerasPackage
  type: string
  default: keras==2.9.0
- name: pluginBuildPipeline
  type: string
  default: current

variables:
- name: platform
  value: 'a'
  readonly: true
- name: artifact
  value: 'a'
  readonly: true
- name: artifactUrl
  value: 'a'
  readonly: true

jobs:
- job: test
  displayName: Test
  pool:
    name: ${{parameters.agentPool}}
    demands:
    - AP.TfPullRequestPlatform -equals ${{variables.platform}}
  timeoutInMinutes: 30
  cancelTimeoutInMinutes: 1
  continueOnError: true
  workspace:
    clean: all
  steps:
  - task: PowerShell@2
    displayName: Download Artifact
    inputs:
      targetType: inline
      script: |
        Invoke-WebRequest -Uri $(artifactUrl) -OutFile $(artifact).zip
        Expand-Archive $(artifact).zip -DestinationPath $(Build.ArtifactStagingDirectory)/$(artifact)

  - ${{each tensorflowPackage in parameters.tensorflowPackages}}:
    - ${{if eq(variables.platform, 'linux') }}:
      - task: PowerShell@2
        displayName: Setup $(artifact) (${{tensorflowPackage}})
        name: test_env_linux_${{replace(tensorflowPackage, '-', '_')}}
        inputs:
          targetType: inline
          script: |
            $ScriptPath = "$(Build.SourcesDirectory)/pipelines/create_test_env.sh" -replace '\\','/'
            $ScriptPathWsl = wsl wslpath -a $ScriptPath
            $TestArtifactPath = "$(Build.ArtifactStagingDirectory)/$(artifact)" -replace '\\','/'
            $TestArtifactPathWsl = wsl wslpath -a $TestArtifactPath
            wsl bash $ScriptPathWsl $TestArtifactPathWsl ${{tensorflowPackage}}==${{parameters.tensorflowVersion}} ${{parameters.kerasPackage}}

      - task: PowerShell@2
        displayName: Test $(artifact) (${{tensorflowPackage}})
        inputs:
          targetType: inline
          script: |
            $ScriptPath = "$(Build.SourcesDirectory)/test/test.py" -replace '\\','/'
            $ScriptPathWsl = wsl wslpath -a $ScriptPath

            # Results are written to Linux filesystem ($ResultsDirLinux) and copied to Windows ($ResultsDirWin)
            $ResultsDirLinux = "/tmp/tfdml_plugin_pipeline/results/$(agentName)/$(artifact)/${{tensorflowPackage}}"
            $ResultsDirWin = "$(System.ArtifactsDirectory)/results/$(agentName)/$(artifact)/${{tensorflowPackage}}" -replace '\\','/'
            $ResultsDirWinWsl = wsl wslpath -a $ResultsDirWin
            New-Item -ItemType Directory $ResultsDirWin -Force | Out-Null

            cmd /c "wsl $(test_env_linux_${{replace(tensorflowPackage, '-', '_')}}.activateCommand); python $ScriptPathWsl --run --parallel --summarize --redirect_output --results_dir $ResultsDirLinux --groups ${{join(' ', parameters.testGroups)}}"
            wsl cp -r $ResultsDirLinux/* $ResultsDirWinWsl

    - ${{if eq(variables.platform, 'windows') }}:
      - task: PowerShell@2
        displayName: Setup $(artifact) (${{tensorflowPackage}})
        name: test_env_win_${{replace(tensorflowPackage, '-', '_')}}
        inputs:
          targetType: filePath
          filePath: pipelines/create_test_env.ps1
          arguments: >
            -TestArtifactPath $(Build.ArtifactStagingDirectory)/$(artifact)
            -TensorFlowPackage ${{tensorflowPackage}}==${{parameters.tensorflowVersion}}
            -KerasPackage ${{parameters.kerasPackage}}

      - task: PowerShell@2
        displayName: Test $(artifact) (${{tensorflowPackage}})
        inputs:
          targetType: inline
          script: |
            Invoke-Expression '$(test_env_win_${{replace(tensorflowPackage, '-', '_')}}.activateCommand)'
            $ResultsDir = "$(System.ArtifactsDirectory)/results/$(agentName)/$(artifact)/${{tensorflowPackage}}"
            python $(Build.SourcesDirectory)/test/test.py --run --parallel --summarize --redirect_output --results_dir $ResultsDir --groups ${{join(' ', parameters.testGroups)}}
