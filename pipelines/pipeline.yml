# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

name: $(Date:yyMMdd-HHmm)$(Rev:.r).$(SourceBranchName)

# No CI trigger; run on a schedule only.
trigger: none

pr:
- main
- releases/*

# Build nightly at 5 AM UTC (10 PM PDT)
schedules:
- cron: "0 5 * * *"
  displayName: Nightly Run
  branches:
    include:
    - main
    - release/*
  always: false

parameters:
- name: releaseBuild
  displayName: Release Build
  type: boolean
  default: false
- name: pypiTestUpload
  type: boolean
  default: false

# Uploads artifacts to blob storage to be ushered to network share. Generally this should only be enabled for main
# and release branches.
- name: blobStorageDropEnabled
  displayName: Submit artifacts to blob storage
  type: boolean
  default: false # NOTE: scheduled runs on main/release branches will implicitly set this to true

- name: buildArtifacts
  displayName: Build Artifacts
  type: object
  default:
  - x64-win-debug-cp39
  - x64-win-release-cp38
  - x64-win-release-cp39
  - x64-win-release-cp310
  - x64-win-release-cp311
  - x64-linux-debug-cp39
  - x64-linux-release-cp38
  - x64-linux-release-cp39
  - x64-linux-release-cp310
  - x64-linux-release-cp311

- name: enableTelemetry
  displayName: Enable Telemetry
  type: boolean
  default: true

- name: testArtifacts
  displayName: Test Artifacts
  type: object
  default: [x64-win-release-cp39, x64-linux-release-cp39]

- name: testGroups
  displayName: Test Groups
  type: object
  default: [ops, plugin, c_api]

- name: testTensorflowPackages
  displayName: TensorFlow Packages To Test Against
  type: object
  default: [tensorflow-cpu]

- name: testTensorflowVersion
  displayName: TensorFlow Package Version
  type: string
  default: 2.12.0

- name: testKerasPackage
  displayName: Keras Package Version
  type: string
  default: keras==2.12.0

- name: enableTests
  displayName: Enable Tests
  type: boolean
  default: true

- name: emailTo
  displayName: Email Results To
  type: string
  default: $(emailTo) # the default is stored in the pipeline as a variable

- name: telemetryProviderGroupGuid
  displayName: Telemetry Provider Group GUID
  type: string
  default: $(telemetryProviderGroupGuid) # the default is stored in the pipeline as a variable

# CAREFUL: remember that variables are always string to string mappings. Unlike boolean-typed 
# parameters, they must be compared to 'True' or 'False' in expressions or they will be 
# implicitly cast: empty string -> false, any other string -> true.
#
# Variables with the same name as a parameter should always be preferred: this is to work around
# the limitation that default parameter values cannot use expressions.
variables:
  isScheduledRun: ${{eq(variables['Build.Reason'], 'schedule')}}
  isMainBranch: ${{eq(variables['Build.SourceBranch'], 'refs/heads/main')}}
  isReleaseBranch: ${{startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')}}
  isMainOrReleaseBranch: ${{or(eq(variables.isMainBranch, 'True'), eq(variables.isReleaseBranch, 'True'))}}
  isScheduledRunOnMainOrReleaseBranch: ${{and(eq(variables.isScheduledRun, 'True'), eq(variables.isMainOrReleaseBranch, 'True'))}}
  blobStorageDropEnabled: ${{or(parameters.blobStorageDropEnabled, eq(variables.isScheduledRunOnMainOrReleaseBranch, 'True'))}}

# TODO: Make our own docker image for our unique dependencies (e.g. clang) instead of using the tensorflow core one
# For building manylinux2010-compliant Linux wheels:
resources:
  containers:
  - container: manylinux
    image: tensorflow/tensorflow:2.5.0-custom-op-ubuntu16

stages:
- stage: buildStage
  displayName: Build
  jobs:
  - ${{each artifact in parameters.buildArtifacts}}:
    - template: build.yml
      parameters:
        artifact: ${{artifact}}
        releaseBuild: ${{parameters.releaseBuild}}
        telemetryProviderGroupGuid: ${{parameters.telemetryProviderGroupGuid}}
        enableTelemetry: ${{parameters.enableTelemetry}}
        ${{if and(contains(artifact, 'x64-win-release'),eq(variables.blobStorageDropEnabled, 'True'))}}:
          addToBlobStorage: true

- ${{if parameters.enableTests}}:
  - stage: testStage
    displayName: Test
    dependsOn: buildStage
    jobs:
    - template: test.yml
      parameters:
        testGroups: ${{parameters.testGroups}}
        artifacts: ${{parameters.testArtifacts}}
        tensorflowPackages: ${{parameters.testTensorflowPackages}}
        tensorflowVersion: ${{parameters.testTensorflowVersion}}
        kerasPackage: ${{parameters.testKerasPackage}}

- ${{if not(eq(variables['Build.Reason'], 'PullRequest'))}}:
  - stage: reportStage
    displayName: Report Results
    ${{if parameters.enableTests}}:
      dependsOn: [buildStage, testStage]
    ${{if not(parameters.enableTests)}}:
      dependsOn: [buildStage]
    condition: succeededOrFailed()
    pool: DirectML_TF2_Windows_Pool
    jobs:
    - template: report.yml
      parameters:
        emailTo: ${{parameters.emailTo}}
        enableTests: ${{parameters.enableTests}}

  - stage: publishStage
    displayName: Publish
    pool: DirectML_TF2_Windows_Pool
    jobs:
    - job: waitForValidation
      pool: server
      displayName: Wait for external validation
      timeoutInMinutes: 1440 # job times out in 1 day
      steps:
      - task: ManualValidation@0
        inputs:
          notifyUsers: |
            $(emailTo)
          instructions: 'If the test results look good, resume the pipeline to publish to PyPI'
          onTimeout: 'resume'
    - job: publish
      displayName: Publish
      dependsOn: waitForValidation
      steps:
      - ${{each artifact in parameters.buildArtifacts}}:
        - download: 'current'
          artifact: ${{artifact}}
          displayName: Download ${{artifact}}
      - powershell: |
          New-Item $(Build.ArtifactStagingDirectory)/pypi -ItemType Directory
          Copy-Item $(Pipeline.Workspace)/x64-linux-release-cp*/*.whl $(Build.ArtifactStagingDirectory)/pypi -Force
          Copy-Item $(Pipeline.Workspace)/x64-win-release-cp*/*.whl $(Build.ArtifactStagingDirectory)/pypi -Force

          pip install twine
          if ("${{parameters.pypiTestUpload}}" -eq "True")
          {
            twine upload --repository-url https://test.pypi.org/legacy/ --username="__token__" --password="$(pypiTestToken)" $(Build.ArtifactStagingDirectory)/pypi/*.whl
          }
          else
          {
            twine upload --username="__token__" --password="$(pypiToken)" $(Build.ArtifactStagingDirectory)/pypi/*.whl
          }
        displayName: Upload wheels to PyPI
    condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/heads/release/'))