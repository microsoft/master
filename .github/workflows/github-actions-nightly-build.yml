name: Nightly Build
on:
  schedule:
    # Build nightly at 5 AM UTC (10 PM PDT)
    - cron:  "0 5 * * *"
  push:
    branches: [user/pavignol/add-github-actions-nightly-build]
jobs:
  build-manylinux:
    strategy:
      matrix:
        python_version: ["3.7", "3.8", "3.9", "3.10"]
        include:
          - python_version: "3.7"
            cp_version_prefix: cp37
            cp_version_suffix: cp37m
          - python_version: "3.8"
            cp_version_prefix: cp38
            cp_version_suffix: cp38
          - python_version: "3.9"
            cp_version_prefix: cp39
            cp_version_suffix: cp39
          - python_version: "3.10"
            cp_version_prefix: cp310
            cp_version_suffix: cp310
    name: Build x64-linux-release-${{ matrix.cp_version_prefix }}-${{ matrix.cp_version_suffix }}
    runs-on: ubuntu-latest
    container:
      image: tensorflow/tensorflow:2.5.0-custom-op-ubuntu16
    steps:
      - uses: actions/checkout@v2
      - name: Install CMake
        run: |
          wget --output-document="/tmp/cmake.sh" https://github.com/Kitware/CMake/releases/download/v3.22.1/cmake-3.22.1-linux-x86_64.sh
          mkdir "/tmp/cmake"
          bash "/tmp/cmake.sh" --skip-license --prefix="/tmp/cmake"
          echo "/tmp/cmake/bin:${PATH}" >> $GITHUB_PATH
      - name: Install Ninja
        run: |
          apt update
          apt install ninja-build -y
      - name: Install Miniconda
        run: |
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh --directory-prefix /tmp
          bash /tmp/Miniconda3-latest-Linux-x86_64.sh -b -p /tmp/miniconda3
          eval "$(/tmp/miniconda3/bin/conda shell.bash hook)"
          conda create --name build python=${{ matrix.python_version }} -y
          conda activate build
          pip install wheel
      - name: Build
        run: |
          export CXX=/usr/bin/clang++-8
          eval "$(/tmp/miniconda3/bin/conda shell.bash hook)"
          conda activate build
          python build.py --config=release --telemetry --telemetry_provider_group_guid="${{ secrets.TELEMETRY_PROVIDER_GROUP_GUID }}"
      - uses: actions/upload-artifact@v3
        with:
          name: tensorflow_directml_plugin-${{ github.sha }}-${{ matrix.cp_version_prefix }}-${{ matrix.cp_version_suffix }}-linux_x86_64
          path: build/tensorflow_directml_plugin-*-${{ matrix.cp_version_prefix }}-${{ matrix.cp_version_suffix }}-linux_x86_64.whl
  build-windows-latest:
    strategy:
      matrix:
        python_version: ["3.7", "3.8", "3.9", "3.10"]
        include:
          - python_version: "3.7"
            cp_version_prefix: cp37
            cp_version_suffix: cp37m
          - python_version: "3.8"
            cp_version_prefix: cp38
            cp_version_suffix: cp38
          - python_version: "3.9"
            cp_version_prefix: cp39
            cp_version_suffix: cp39
          - python_version: "3.10"
            cp_version_prefix: cp310
            cp_version_suffix: cp310
    name: Build x64-win-release-${{ matrix.cp_version_prefix }}-${{ matrix.cp_version_suffix }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install CMake
        shell: pwsh
        run: |
          $Url = 'https://github.com/Kitware/CMake/releases/download/v3.22.1/cmake-3.22.1-windows-x86_64.zip'
          $DownloadPath = "$env:TEMP/cmake.zip"
          (New-Object System.Net.WebClient).DownloadFile($Url, $DownloadPath)
          Expand-Archive $DownloadPath -DestinationPath cmake
          "$env:TEMP/cmake-3.22.1-windows-x86_64/bin" >> $env:GITHUB_PATH
      - name: Download Miniconda
        shell: pwsh
        run: |
          $Url = 'https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe'
          $DownloadPath = "$env:TEMP/miniconda.exe"
          (New-Object System.Net.WebClient).DownloadFile($Url, $DownloadPath)
      - name: Install Miniconda
        shell: cmd
        run: |
          %TEMP%\miniconda.exe /NoRegistry=1 /InstallationType=JustMe /RegisterPython=0 /S /D=%TEMP%\miniconda3
      - name: Create Miniconda Environment
        shell: pwsh
        run: |
          & "$env:TEMP/miniconda3/shell/condabin/conda-hook.ps1"
          conda create --name build python=${{ matrix.python_version }} -y
          conda activate build
          pip install wheel vswhere
      - name: Build
        shell: pwsh
        run: |
          & "$env:TEMP/miniconda3/shell/condabin/conda-hook.ps1"
          conda activate build
          python build.py --config=release --telemetry --telemetry_provider_group_guid="${{ secrets.TELEMETRY_PROVIDER_GROUP_GUID }}"
      - uses: actions/upload-artifact@v3
        with:
          name: tensorflow_directml_plugin-${{ github.sha }}-${{ matrix.cp_version_prefix }}-${{ matrix.cp_version_suffix }}-win_amd64
          path: build/tensorflow_directml_plugin-*-${{ matrix.cp_version_prefix }}-${{ matrix.cp_version_suffix }}-win_amd64.whl
