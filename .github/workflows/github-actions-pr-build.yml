name: Pull Request Build
on:
  pull_request:
    types: [opened, synchronize, edited, reopened]
    branches: [main, release/*]
  push:
    branches: [user/pavignol/cache-build-steps]
concurrency:
  group: pr-build-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-manylinux:
    name: Build x64-linux-release-cp37
    runs-on: ubuntu-latest
    container:
      image: tensorflow/tensorflow:2.5.0-custom-op-ubuntu16
    steps:
      - uses: actions/checkout@v2
      - name: Cache CMake
        id: cache-cmake
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake
        with:
          path: /tmp/cmake
          key: ${{ runner.os }}-${{ env.cache-name }}-cmake-3.22.1
      - name: Cache Ninja
        id: cache-ninja
        uses: actions/cache@v3
        env:
          cache-name: cache-ninja
        with:
          path: /usr/bin/ninja
          key: ${{ runner.os }}-${{ env.cache-name }}-ninja
      - name: Cache Miniconda
        id: cache-miniconda
        uses: actions/cache@v3
        env:
          cache-name: cache-miniconda
        with:
          path: /tmp/miniconda3
          key: ${{ runner.os }}-${{ env.cache-name }}-miniconda3
      - name: Cache Build Dependencies
        id: cache-build-deps
        uses: actions/cache@v3
        env:
          cache-name: cache-build-deps
        with:
          path: build
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/dependencies.cmake') }}
      - name: Install CMake
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: |
          wget --output-document="/tmp/cmake.sh" https://github.com/Kitware/CMake/releases/download/v3.22.1/cmake-3.22.1-linux-x86_64.sh
          mkdir "/tmp/cmake"
          bash "/tmp/cmake.sh" --skip-license --prefix="/tmp/cmake"
      - name: Install Ninja
        if: steps.cache-ninja.outputs.cache-hit != 'true'
        run: |
          apt update
          apt install ninja-build -y
      - name: Install Miniconda
        if: steps.cache-miniconda.outputs.cache-hit != 'true'
        run: |
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh --directory-prefix /tmp
          bash /tmp/Miniconda3-latest-Linux-x86_64.sh -b -p /tmp/miniconda3
      - name: Create Miniconda Environment
        run: |
          eval "$(/tmp/miniconda3/bin/conda shell.bash hook)"
          conda create --name build python=3.7 -y
          conda activate build
          pip install wheel
      - name: Build
        run: |
          echo "/tmp/cmake/bin:${PATH}" >> $GITHUB_PATH
          export CXX=/usr/bin/clang++-8
          eval "$(/tmp/miniconda3/bin/conda shell.bash hook)"
          conda activate build
          python build.py --config release
  build-windows-latest:
    name: Build x64-win-release-cp37
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Miniconda
        id: cache-miniconda
        uses: actions/cache@v3
        env:
          cache-name: cache-miniconda
        with:
          path: miniconda3
          key: ${{ runner.os }}-${{ env.cache-name }}-miniconda3
      - name: Cache Build Dependencies
        id: cache-build-deps
        uses: actions/cache@v3
        env:
          cache-name: cache-build-deps
        with:
          path: build
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/dependencies.cmake') }}
      - name: Download Miniconda
        if: steps.cache-miniconda.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $Url = 'https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe'
          $DownloadPath = "$env:TEMP/miniconda.exe"
          (New-Object System.Net.WebClient).DownloadFile($Url, $DownloadPath)
      - name: Install Miniconda
        if: steps.cache-miniconda.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          %TEMP%\miniconda.exe /NoRegistry=1 /InstallationType=JustMe /RegisterPython=0 /S /D=miniconda3
      - name: Create Miniconda Environment
        shell: pwsh
        run: |
          & "miniconda3/shell/condabin/conda-hook.ps1"
          conda create --name build python=3.7 -y
          conda activate build
          pip install wheel vswhere
      - name: Build
        shell: pwsh
        run: |
          & "miniconda3/shell/condabin/conda-hook.ps1"
          conda activate build
          python build.py --config release
