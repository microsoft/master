load(
    "//tfdml:tfdml.bzl",
    "if_not_windows",
    "if_windows",
)

package(
    licenses = ["notice"],  # Apache 2.0
)

cc_library(
    name = "plugin_device",
    srcs = ["plugin_device.cc"],
    linkstatic = 1,
    visibility = ["//visibility:public"],
    deps = [
        "//tfdml/core:dml_runtime",
        "@directml//:directmlx",
        "@directx_headers",
        "@directx_headers//:directx_guids",
        "@directx_headers//:directx_winadapter",
        "@dml_redist//:headers",
        "@tensorflow//:headers",
    ],
    alwayslink = True,
)

cc_library(
    name = "plugin_kernel",
    srcs = ["plugin_kernel.cc"],
    linkstatic = 1,
    visibility = ["//visibility:public"],
    deps = [
        ":plugin_device",
        "//tfdml/core/kernels:dml_kernels",
        "@tensorflow//:headers",
    ],
    alwayslink = True,
)

cc_library(
    name = "dml_util",
    srcs = [
        "util/allocator.cc",
        "util/allocator_retry.cc",
        "util/bcast.cc",
        "util/bfc_allocator.cc",
        "util/device.cc",
        "util/env.cc",
        "util/env_var.cc",
        "util/kernel_def_builder.cc",
        "util/numbers.cc",
        "util/op_kernel_construction.cc",
        "util/op_kernel_context.cc",
        "util/resource_mgr.cc",
        "util/status.cc",
        "util/tensor.cc",
        "util/tensor_shape.cc",
        "util/tensor_shape_utils.cc",
        "util/types.cc",
    ],
    hdrs = [
        "util/allocator.h",
        "util/allocator_retry.h",
        "util/attribute.h",
        "util/bcast.h",
        "util/bfc_allocator.h",
        "util/device.h",
        "util/env.h",
        "util/env_var.h",
        "util/kernel_def_builder.h",
        "util/macros.h",
        "util/numbers.h",
        "util/op_kernel.h",
        "util/op_kernel_construction.h",
        "util/op_kernel_context.h",
        "util/refcount.h",
        "util/resource_mgr.h",
        "util/resource_var.h",
        "util/status.h",
        "util/statusor.h",
        "util/stream.h",
        "util/tensor.h",
        "util/tensor_format.h",
        "util/tensor_shape.h",
        "util/tensor_shape_utils.h",
        "util/types.h",
        "util/wide_char.h",
    ],
    linkstatic = 1,
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/base:config",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/container:hash_function_defaults",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/container:raw_hash_map",
        "@com_google_absl//absl/container:raw_hash_set",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:span",
        "@com_google_absl//absl/types:variant",
        "@tensorflow//:headers",
        "@tensorflow//:lib",
        "@tensorflow//:resource_handle_cc_proto",
    ],
    alwayslink = 1,
)

cc_library(
    name = "dml_runtime_impl",
    srcs = [
        "common_runtime/dml/dml_adapter.cc",
        "common_runtime/dml/dml_adapter_impl.cc",
        "common_runtime/dml/dml_bfc_allocator.cc",
        "common_runtime/dml/dml_buffer.cc",
        "common_runtime/dml/dml_buffer_region.cc",
        "common_runtime/dml/dml_command_list.cc",
        "common_runtime/dml/dml_command_queue.cc",
        "common_runtime/dml/dml_descriptor_bfc_allocator.cc",
        "common_runtime/dml/dml_descriptor_heap_allocator.cc",
        "common_runtime/dml/dml_descriptor_pool.cc",
        "common_runtime/dml/dml_device.cc",
        "common_runtime/dml/dml_device_cache.cc",
        "common_runtime/dml/dml_device_context.cc",
        "common_runtime/dml/dml_device_state.cc",
        "common_runtime/dml/dml_dso_loader.cc",
        "common_runtime/dml/dml_error_handling.cc",
        "common_runtime/dml/dml_event_queue.cc",
        "common_runtime/dml/dml_execution_context.cc",
        "common_runtime/dml/dml_guids.cc",
        "common_runtime/dml/dml_heap_allocator.cc",
        "common_runtime/dml/dml_kernel_context.cc",
        "common_runtime/dml/dml_kernel_key.cc",
        "common_runtime/dml/dml_kernel_manager.cc",
        "common_runtime/dml/dml_operator_helper.cc",
        "common_runtime/dml/dml_pooled_heap.cc",
        "common_runtime/dml/dml_readback_heap.cc",
        "common_runtime/dml/dml_tensor_desc.cc",
        "common_runtime/dml/dml_tracing.cc",
        "common_runtime/dml/dml_upload_heap.cc",
        "common_runtime/dml/dml_util.cc",
    ],
    hdrs = [
        "common_runtime/dml/dml_adapter.h",
        "common_runtime/dml/dml_adapter_heuristics.h",
        "common_runtime/dml/dml_adapter_impl.h",
        "common_runtime/dml/dml_bfc_allocator.h",
        "common_runtime/dml/dml_buffer.h",
        "common_runtime/dml/dml_buffer_region.h",
        "common_runtime/dml/dml_command_allocator_ring.h",
        "common_runtime/dml/dml_command_list.h",
        "common_runtime/dml/dml_command_queue.h",
        "common_runtime/dml/dml_common.h",
        "common_runtime/dml/dml_descriptor_bfc_allocator.h",
        "common_runtime/dml/dml_descriptor_heap_allocator.h",
        "common_runtime/dml/dml_descriptor_pool.h",
        "common_runtime/dml/dml_device.h",
        "common_runtime/dml/dml_device_cache.h",
        "common_runtime/dml/dml_device_context.h",
        "common_runtime/dml/dml_device_state.h",
        "common_runtime/dml/dml_dso_loader.h",
        "common_runtime/dml/dml_error_handling.h",
        "common_runtime/dml/dml_event_queue.h",
        "common_runtime/dml/dml_execution_context.h",
        "common_runtime/dml/dml_gpu_event.h",
        "common_runtime/dml/dml_guids.h",
        "common_runtime/dml/dml_heap_allocator.h",
        "common_runtime/dml/dml_kernel_context.h",
        "common_runtime/dml/dml_kernel_key.h",
        "common_runtime/dml/dml_kernel_manager.h",
        "common_runtime/dml/dml_operator_helper.h",
        "common_runtime/dml/dml_pooled_heap.h",
        "common_runtime/dml/dml_readback_heap.h",
        "common_runtime/dml/dml_tensor_desc.h",
        "common_runtime/dml/dml_tracing.h",
        "common_runtime/dml/dml_upload_heap.h",
        "common_runtime/dml/dml_util.h",
    ],
    copts = if_windows([
        "-DDML_BUILD_WINDOWS",
        "-D_WIN32_WINNT=_WIN32_WINNT_WIN10",
    ]),
    linkopts = if_windows([
        "pathcch.lib",
        "advapi32.lib",
    ]) + if_not_windows([
        "-Wl,-rpath,$$ORIGIN/directml",
    ]),
    linkstatic = 1,
    deps = [
        ":dml_util",
        "@dml_redist//:headers",
        "@directml//:directmlx",
        "@directx_headers//:directx_headers",
        "@directx_headers//:directx_guids",
        "@directx_headers//:directx_winadapter",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/container:inlined_vector",
        "@tensorflow//:headers",
    ] + if_windows(["@pix//:headers"]),
    alwayslink = 1,
)

cc_library(
    name = "dml_runtime",
    copts = if_windows([
        "-DDML_BUILD_WINDOWS",
        "-D_WIN32_WINNT=_WIN32_WINNT_WIN10",
    ]),
    linkstatic = 1,
    visibility = ["//visibility:public"],
    deps = [
        ":dml_runtime_impl",
    ],
    alwayslink = 1,
)
