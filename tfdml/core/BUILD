load(
    "//tfdml:tfdml.bzl",
    "if_not_windows",
    "if_windows",
)

package(
    licenses = ["notice"],  # Apache 2.0
)

cc_library(
    name = "core",
    srcs = [
        "device.cc",
        "dml_adapter.cc",
        "dml_adapter_impl.cc",
        "dml_bfc_allocator.cc",
        "dml_buffer.cc",
        "dml_buffer_region.cc",
        "dml_command_list.cc",
        "dml_command_queue.cc",
        "dml_descriptor_bfc_allocator.cc",
        "dml_descriptor_heap_allocator.cc",
        "dml_descriptor_pool.cc",
        "dml_device.cc",
        "dml_device_cache.cc",
        "dml_device_context.cc",
        "dml_device_state.cc",
        "dml_dso_loader.cc",
        "dml_error_handling.cc",
        "dml_event_queue.cc",
        "dml_execution_context.cc",
        "dml_guids.cc",
        "dml_heap_allocator.cc",
        "dml_kernel_context.cc",
        "dml_kernel_key.cc",
        "dml_kernel_manager.cc",
        "dml_kernel_wrapper.cc",
        "dml_operator_helper.cc",
        "dml_ops_common.cc",
        "dml_pooled_heap.cc",
        "dml_readback_heap.cc",
        "dml_tensor_desc.cc",
        "dml_tracing.cc",
        "dml_upload_heap.cc",
        "dml_util.cc",
        "op_kernel_construction.cc",
        "op_kernel_context.cc",
        "types.cc",
    ],
    hdrs = [
        "attribute.h",
        "device.h",
        "dml_adapter.h",
        "dml_adapter_heuristics.h",
        "dml_adapter_impl.h",
        "dml_bfc_allocator.h",
        "dml_buffer.h",
        "dml_buffer_region.h",
        "dml_command_allocator_ring.h",
        "dml_command_list.h",
        "dml_command_queue.h",
        "dml_common.h",
        "dml_descriptor_bfc_allocator.h",
        "dml_descriptor_heap_allocator.h",
        "dml_descriptor_pool.h",
        "dml_device.h",
        "dml_device_cache.h",
        "dml_device_context.h",
        "dml_device_state.h",
        "dml_dso_loader.h",
        "dml_error_handling.h",
        "dml_event_queue.h",
        "dml_execution_context.h",
        "dml_gpu_event.h",
        "dml_guids.h",
        "dml_heap_allocator.h",
        "dml_kernel_context.h",
        "dml_kernel_key.h",
        "dml_kernel_manager.h",
        "dml_kernel_wrapper.h",
        "dml_operator_helper.h",
        "dml_ops_common.h",
        "dml_pooled_heap.h",
        "dml_readback_heap.h",
        "dml_tensor_desc.h",
        "dml_tracing.h",
        "dml_upload_heap.h",
        "dml_util.h",
        "kernel_def_builder.h",
        "node_def.h",
        "op_defs.h",
        "op_defs_core.h",
        "op_defs_dml.h",
        "op_kernel.h",
        "op_kernel_construction.h",
        "op_kernel_context.h",
        "types.h",
    ],
    copts = if_windows([
        "-DDML_BUILD_WINDOWS",
        "-D_WIN32_WINNT=_WIN32_WINNT_WIN10",
    ]),
    linkopts = if_windows([
        "pathcch.lib",
        "advapi32.lib",
    ]) + if_not_windows([
        "-Wl,-rpath,$$ORIGIN/directml",
    ]),
    linkstatic = 1,
    visibility = ["//visibility:public"],
    deps = [
        "@dml_redist//:headers",
        "@directml//:directmlx",
        "@directx_headers//:directx_headers",
        "@directx_headers//:directx_guids",
        "@directx_headers//:directx_winadapter",
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/base:config",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/container:hash_function_defaults",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/container:raw_hash_map",
        "@com_google_absl//absl/container:raw_hash_set",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:span",
        "@com_google_absl//absl/types:variant",
        "@tensorflow//:headers",
        "@tensorflow//:lib",
        "@tensorflow//:resource_handle_cc_proto",
    ] + if_windows(["@pix//:headers"]),
    alwayslink = 1,
)
